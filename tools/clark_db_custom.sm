rule clark_db_custom_1:
	output: sep_seq_folder = temp(config['dbdir'] + "{database}/clark_db/Custom/")
	log: config['dbdir'] + "{database}/log/clark_db_custom_1.log"
	benchmark: config['dbdir'] + "{database}/log/clark_db_custom_1.time"
	params: seq_folder = lambda wildcards: customdbs[wildcards.database]["clark"] if wildcards.database in customdbs and "clark" in customdbs[wildcards.database] else ""
	shell: 
		"""
		if [ -d "{params.seq_folder}" ]; then
			# Separate one file per sequence
			mkdir -p {output.sep_seq_folder}
			cat {params.seq_folder}/*.fna | awk -v sep_seq_folder='{output.sep_seq_folder}' '{{if (substr($0, 1, 1)==">") {{filename=(sep_seq_folder "/" substr($1,2) ".fna")}}; print $0 > filename}}'
		else
			echo "Custom database ({wildcards.database}) -> '{params.seq_folder}': No such file or directory" > {log}
		fi
		"""

rule clark_db_custom_2:
	input: 	taxdump = ancient(config["dbdir"] + "taxonomy/taxdump.tar.gz"),
			nucl_gb = ancient(config['dbdir'] + "taxonomy/nucl_gb.accession2taxid.gz"),
			nucl_wgs = ancient(config['dbdir'] + "taxonomy/nucl_wgs.accession2taxid.gz")
	output: nucl_accss = temp(config['dbdir'] + "{database}/clark_db/taxonomy/nucl_accss"),
			taxondata = temp(touch(config['dbdir'] + "{database}/clark_db/.taxondata"))
	log: config['dbdir'] + "{database}/log/clark_db_custom_2.log"
	benchmark: config['dbdir'] + "{database}/log/clark_db_custom_2.time"
	params: taxonomy = config['dbdir'] + "{database}/clark_db/taxonomy/"
	shell:
		"""
        # Emulate the script: opt/clark/download_taxondata.sh 
    	#	 cat nucl_gb.accession2taxid > ./nucl_accss
        #    cat nucl_wgs.accession2taxid >> ./nucl_accss
        #    touch ../.taxondata
		mkdir -p {params.taxonomy}
		gzip -d -c {input.nucl_gb} {input.nucl_wgs} > {output.nucl_accss} 2> {log}
		tar -zxvf {input.taxdump} -C {config[dbdir]}{wildcards.database}/clark_db/taxonomy/ >> {log} 2>&1
		"""    

rule clark_db_custom_3:
	input: sep_seq_folder = config['dbdir'] + "{database}/clark_db/Custom/",
			taxondata = config['dbdir'] + "{database}/clark_db/.taxondata",
			nucl_accss = config['dbdir'] + "{database}/clark_db/taxonomy/nucl_accss"
	output: targets = config['dbdir'] + "{database}/clark_db/targets.txt",
	log: config['dbdir'] + "{database}/log/clark_db_custom_3.log"
	benchmark: config['dbdir'] + "{database}/log/clark_db_custom_3.time"
	conda: srcdir("../envs/clark.yaml")
	params: srcdir = srcdir("")
	shell:
		"""
		# The script should be on set_targets.sh script folder (ENV/opt/clark/) to generate the database 
		# with correct paths. If there's no alternative path set, get current environment path 
		if [[ "{config[tool_alt_path][clark]}" != "" ]]; then
			clark_opt_path="{config[tool_alt_path][clark]}"
		else
			clark_opt_path="${{PATH%%/bin:*}}/opt/clark/"
		fi
		# Get absolute paths in case they are relative
		abs_log=$(readlink -e {config[dbdir]}{wildcards.database}/log/)
		abs_db=$(readlink -e {config[dbdir]}{wildcards.database}/clark_db/)

		cd ${{clark_opt_path}}
		./set_targets.sh ${{abs_db}}/ custom > ${{abs_log}}/clark_db_custom_3.log 2>&1
		# Remove custom_0 in case it exists to force execution of the next rule
		rm -rfv ${{abs_db}}/custom_0/ >> ${{abs_log}}/clark_db_custom_3.log 2>&1
		"""	


rule clark_db_custom_4:
	input: sep_seq_folder = config['dbdir'] + "{database}/clark_db/Custom/",
			targets = config['dbdir'] + "{database}/clark_db/targets.txt",
			dummy_file = ancient(srcdir("../scripts/dummy.fq"))
	output: db_folder = config['dbdir'] + "{database}/clark_db/custom_0/",
			dummy_out = temp(config['dbdir'] + "{database}/clark_db/dummy_out.csv")
	log: config['dbdir'] + "{database}/log/clark_db_custom_4.log"
	benchmark: config['dbdir'] + "{database}/log/clark_db_custom_4.time"
	threads: config["threads"]
	conda: srcdir("../envs/clark.yaml")
	# Use custom_0/ as input because db output files have variable names
	shell: "{config[tool_alt_path][clark]}CLARK -T {input.targets} -D {output.db_folder} -O {input.dummy_file} -R {config[dbdir]}{wildcards.database}/clark_db/dummy_out -n {threads} > {log} 2>&1"
	
rule clark_db_custom_profile:
	input: targets = config['dbdir'] + "{database}/clark_db/targets.txt"
	output: temp(config['dbdir'] + "{database}/clark.dbaccession.out")
	log: config['dbdir'] + "{database}/log/clark_db_custom_profile.log"
	benchmark: config['dbdir'] + "{database}/log/clark_db_custom_profile.time"
	params: seq_folder = lambda wildcards: customdbs[wildcards.database]["clark"] if wildcards.database in customdbs and "clark" in customdbs[wildcards.database] else ""
	shell: 
		"""
		if [ -d "{params.seq_folder}" ]; then
			cut -f 1 {input.targets} | sed 's/.*\///g; s/.fna//g' > {output} 2> {log}
		else
			echo "Custom database ({wildcards.database}) -> '{params.seq_folder}': No such file or directory" > {log}
		fi
		"""
	
rule clark_db_custom_check:
	input: ancient(config['dbdir'] + "{database}/clark.dbprofile.out"),
			ancient(config['dbdir'] + "{database}/clark_db/custom_0/"),
			ancient(config['dbdir'] + "{database}/clark_db/targets.txt")
	output: db_check = touch(config['dbdir'] + "{database}/clark_db_check.done")
	log: config['dbdir'] + "{database}/log/clark_db_custom_check.log"
benchmark: config['dbdir'] + "{database}/log/clark_db_custom_check.time"
