rule kraken2_db_custom_1:
	output:	config['dbdir'] + "{database}/kraken2_db/library/"
	log: config['dbdir'] + "{database}/log/kraken2_db_custom_1.log"
	benchmark: config['dbdir'] + "{database}/log/kraken2_db_custom_1.time"
	threads: config["threads"]
	conda: srcdir("../envs/kraken2.yaml")
	params: seq_folder = lambda wildcards: customdbs[wildcards.database]["kraken2"] if wildcards.database in customdbs and "kraken2" in customdbs[wildcards.database] else ""
	shell:
		"""
		if [ -d "{params.seq_folder}" ]; then
			ls -t {params.seq_folder}/*.fna | xargs --max-procs={threads} -I '{{}}' {config[tool_alt_path][kraken2]}kraken2-build --db {config[dbdir]}{wildcards.database}/kraken2_db/ --add-to-library '{{}}' >> {log} 2>&1
		else
			echo "Custom database ({wildcards.database}) -> '{params.seq_folder}': No such file or directory" > {log}
		fi
		"""

rule kraken2_db_custom_2:
        input: taxdump = ancient(config['dbdir'] + "taxonomy/taxdump.tar.gz"),
                        nucl_gb = ancient(config['dbdir'] + "taxonomy/nucl_gb.accession2taxid.gz"),
                        nucl_wgs = ancient(config['dbdir'] + "taxonomy/nucl_wgs.accession2taxid.gz")
        output: nodes = config['dbdir'] + "{database}/kraken2_db/taxonomy/nodes.dmp",
                        names = config['dbdir'] + "{database}/kraken2_db/taxonomy/names.dmp",
                        nucl_gb_unzip = temp(config['dbdir'] + "{database}/kraken2_db/taxonomy/nucl_gb.accession2taxid"),
                        nucl_wgs_unzip = temp(config['dbdir'] + "{database}/kraken2_db/taxonomy/nucl_wgs.accession2taxid")
        log: config['dbdir'] + "{database}/log/kraken2_db_custom_2.log"
        benchmark: config['dbdir'] + "{database}/log/kraken2_db_custom_2.time"
        shell:
                """
                mkdir -p {config[dbdir]}{wildcards.database}/kraken2_db/taxonomy/
                tar -zxvf {input.taxdump} -C {config[dbdir]}{wildcards.database}/kraken2_db/taxonomy nodes.dmp names.dmp > {log} 2>&1
                gzip -dkc {input.nucl_gb} > {output.nucl_gb_unzip} 2> {log}
                gzip -dkc {input.nucl_wgs} > {output.nucl_wgs_unzip} 2> {log}
                """

rule kraken2_db_custom_3:
        input: config['dbdir'] + "{database}/kraken2_db/library/",
                        config['dbdir'] + "{database}/kraken2_db/taxonomy/nodes.dmp",
                        config['dbdir'] + "{database}/kraken2_db/taxonomy/names.dmp",
                        config['dbdir'] + "{database}/kraken2_db/taxonomy/nucl_gb.accession2taxid",
                        config['dbdir'] + "{database}/kraken2_db/taxonomy/nucl_wgs.accession2taxid"
        output: config['dbdir'] + "{database}/kraken2_db/hash.k2d",
                        config['dbdir'] + "{database}/kraken2_db/opts.k2d",
                        config['dbdir'] + "{database}/kraken2_db/taxo.k2d"
        log: config['dbdir'] + "{database}/log/kraken2_db_custom_3.log"
        benchmark: config['dbdir'] + "{database}/log/kraken2_db_custom_3.time"
        threads: config["threads"]
        conda: srcdir("../envs/kraken2.yaml")
        shell:
                """
		{config[tool_alt_path][kraken2]}kraken2-build --db {config[dbdir]}{wildcards.database}/kraken2_db/ --build --threads {threads} > {log} 2>&1
		{config[tool_alt_path][kraken2]}kraken2-build --db {config[dbdir]}{wildcards.database}/kraken2_db/ --clean >> {log} 2>&1
                """

rule kraken2_db_custom_profile:
	input: config['dbdir'] + "{database}/kraken2_db/library/"
	output: temp(config['dbdir'] + "{database}/kraken2.dbaccession.out")
	log: config['dbdir'] + "{database}/log/kraken2_db_custom_profile.log"
	benchmark: config['dbdir'] + "{database}/log/kraken2_db_custom_profile.time"
	shell: "cat {input}added/*.fna | grep '>' | grep -o '^[^ ]*' | cut -d '|' -f 4 | cut -d ">" -f 2 > {output} 2> {log}"

rule kraken2_db_custom_check:
	input: ancient(config['dbdir'] + "{database}/kraken2.dbprofile.out"),
			ancient(config['dbdir'] + "{database}/kraken2_db/hash.k2d"),
			ancient(config['dbdir'] + "{database}/kraken2_db/opts.k2d"),
                        ancient(config['dbdir'] + "{database}/kraken2_db/taxo.k2d"),
	output: db_check = touch(config['dbdir'] + "{database}/kraken2_db_check.done")
	log: config['dbdir'] + "{database}/log/kraken2_db_custom_check.log"
	benchmark: config['dbdir'] + "{database}/log/kraken2_db_custom_check.time"

